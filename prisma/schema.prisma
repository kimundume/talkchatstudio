// TalkChat Studio - Multi-tenant Database Schema
// This schema supports tenants, users, chatbots, conversations, and more

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(TENANT_USER)
  tenantId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  tenant        Tenant?         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages      Message[]
  assignedChats ChatAssignment[]

  @@index([tenantId])
  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  SUPERADMIN
  SUPERADMIN_SUPPORT
  TENANT_ADMIN
  TENANT_USER
}

// ============================================
// TENANT MANAGEMENT
// ============================================

model Tenant {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  email       String
  plan        SubscriptionPlan @default(STARTER)
  status      TenantStatus @default(ACTIVE)
  settings    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  users       User[]
  chatbots    Chatbot[]
  conversations Conversation[]
  channels    Channel[]

  @@index([slug])
  @@index([status])
}

enum SubscriptionPlan {
  STARTER
  PRO
  AGENCY
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  TRIAL
  CANCELLED
}

// ============================================
// CHATBOT MANAGEMENT
// ============================================

model Chatbot {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  settings    Json     // Widget customization, colors, greetings, etc.
  embedCode   String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  triggers      Trigger[]

  @@index([tenantId])
  @@index([embedCode])
}

model Trigger {
  id          String      @id @default(cuid())
  chatbotId   String
  name        String
  type        TriggerType
  conditions  Json        // Conditions for trigger activation
  actions     Json        // Actions to perform when triggered
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@index([chatbotId])
}

enum TriggerType {
  PAGE_LOAD
  TIME_DELAY
  EXIT_INTENT
  SCROLL_DEPTH
  KEYWORD
  CART_ABANDONMENT
}

// ============================================
// CONVERSATIONS & MESSAGING
// ============================================

model Conversation {
  id          String            @id @default(cuid())
  tenantId    String
  chatbotId   String?
  channelId   String?
  visitorId   String?
  visitorName String?
  visitorEmail String?
  status      ConversationStatus @default(OPEN)
  sentiment   String?           // AI-generated sentiment
  metadata    Json?             // Additional visitor info
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  tenant      Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  chatbot     Chatbot?          @relation(fields: [chatbotId], references: [id], onDelete: SetNull)
  channel     Channel?          @relation(fields: [channelId], references: [id], onDelete: SetNull)
  messages    Message[]
  assignments ChatAssignment[]

  @@index([tenantId])
  @@index([chatbotId])
  @@index([channelId])
  @@index([status])
  @@index([createdAt])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  userId         String?
  content        String @db.Text
  type           MessageType @default(TEXT)
  isFromVisitor  Boolean  @default(true)
  metadata       Json?    // Attachments, reactions, etc.
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([conversationId])
  @@index([userId])
  @@index([createdAt])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VOICE
  VIDEO
  SYSTEM
}

enum ConversationStatus {
  OPEN
  ASSIGNED
  RESOLVED
  CLOSED
}

model ChatAssignment {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  assignedAt     DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
}

// ============================================
// MULTI-CHANNEL INTEGRATION
// ============================================

model Channel {
  id            String        @id @default(cuid())
  tenantId      String
  type          ChannelType
  name          String
  credentials   Json          // API keys, tokens, etc. (encrypted)
  isActive      Boolean       @default(true)
  settings      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@index([tenantId])
  @@index([type])
}

enum ChannelType {
  WEBSITE
  WHATSAPP
  FACEBOOK
  INSTAGRAM
  EMAIL
  SMS
}
